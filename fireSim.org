# -*- org-babel-tangled-file: t; org-babel-tangle-run-postTangleScript: t; -*-

#+TITLE:     fireSim.org
#+AUTHOR:    Rainer M Krug
#+EMAIL:     Rainer@krugs.de
#+DESCRIPTION: R Package Development Helpers
#+KEYWORDS: 

:CONFIG:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 

#+TODO: TODO OPTIMIZE TOGET COMPLETE WAIT VERIFY CHECK CODE DOCUMENTATION | DONE RECEIVED CANCELD 

#+STARTUP: indent hidestars nohideblocks
#+DRAWERS: HIDDEN PROPERTIES STATE CONFIG BABEL OUTPUT LATEXHEADER HTMLHEADER
#+STARTUP: nohidestars hideblocks
:END:
:HTMLHEADER:
#+begin_html
  <div id="subtitle" style="float: center; text-align: center;">
  <p>
Org-babel support for building 
  <a href="http://www.r-project.org/">R</a> packages
  </p>
  <p>
  <a href="http://www.r-project.org/">
  <img src="http://www.r-project.org/Rlogo.jpg"/>
  </a>
  </p>
  </div>
#+end_html
:END:
:LATEXHEADER:
#+LATEX_HEADER: \usepackage{rotfloat}
#+LATEX_HEADER: \definecolor{light-gray}{gray}{0.9}
#+LATEX_HEADER: \lstset{%
#+LATEX_HEADER:     basicstyle=\ttfamily\footnotesize,       % the font that is used for the code
#+LATEX_HEADER:     tabsize=4,                       % sets default tabsize to 4 spaces
#+LATEX_HEADER:     numbers=left,                    % where to put the line numbers
#+LATEX_HEADER:     numberstyle=\tiny,               % line number font size
#+LATEX_HEADER:     stepnumber=0,                    % step between two line numbers
#+LATEX_HEADER:     breaklines=true,                 %!! don't break long lines of code
#+LATEX_HEADER:     showtabs=false,                  % show tabs within strings adding particular underscores
#+LATEX_HEADER:     showspaces=false,                % show spaces adding particular underscores
#+LATEX_HEADER:     showstringspaces=false,          % underline spaces within strings
#+LATEX_HEADER:     keywordstyle=\color{blue},
#+LATEX_HEADER:     identifierstyle=\color{black},
#+LATEX_HEADER:     stringstyle=\color{green},
#+LATEX_HEADER:     commentstyle=\color{red},
#+LATEX_HEADER:     backgroundcolor=\color{light-gray},   % sets the background color
#+LATEX_HEADER:     columns=fullflexible,  
#+LATEX_HEADER:     basewidth={0.5em,0.4em}, 
#+LATEX_HEADER:     captionpos=b,                    % sets the caption position to `bottom'
#+LATEX_HEADER:     extendedchars=false              %!?? workaround for when the listed file is in UTF-8
#+LATEX_HEADER: }
:END:
:BABEL:
#+PROPERTY: exports code
#+PROPERTY: comments yes
#+PROPERTY: padline no
#+PROPERTY: var MAJORVERSION=0
#+PROPERTY: var+ MINORVERSION=1
#+PROPERTY: var+ PATCHVERSION=0
#+PROPERTY: var+ GITHASH="testhash" 
#+PROPERTY: var+ GITCOMMITDATE="testdate"
:END:

* Internal configurations                      :noexport:
** Evaluate to run post tangle script
#+begin_src emacs-lisp :results silent :tangle no :exports none
  (add-hook 'org-babel-post-tangle-hook
            (
             lambda () 
                    (call-process-shell-command "./postTangleScript.sh" nil 0 nil)
  ;;              (async-shell-command "./postTangleScript.sh")
  ;;              (ess-load-file (save-window-excursion (replace-regexp-in-string ".org" ".R" buffer-file-name)))))
  ;;              (ess-load-file "nsa.R")))
  ;;              (ess-load-file "spreadSim.R")
                    )
            )
#+end_src

** Post tangle script
#+begin_src sh :results output :tangle ./postTangleScript.sh :var VER=(vc-working-revision (buffer-file-name)) :var STATE=(vc-state (or (buffer-file-name) org-current-export-file))
sed -i '' s/MAJORVERSION/$MAJORVERSION/ ./DESCRIPTION
sed -i '' s/MINORVERSION/$MINORVERSION/ ./DESCRIPTION
sed -i '' s/PATCHVERSION/$PATCHVERSION/ ./DESCRIPTION
sed -i '' s/TODAYSDATE/`date +%Y-%m-%d_%H-%M`/ ./DESCRIPTION

sed -i '' s/MAJORVERSION/$MAJORVERSION/ ./R/package.R
sed -i '' s/MINORVERSION/$MINORVERSION/ ./R/package.R
sed -i '' s/PATCHVERSION/$PATCHVERSION/ ./R/package.R
sed -i '' s/TODAYSDATE/`date +%Y-%m-%d_%H-%M`/ ./R/package.R

Rscript -e "library(roxygen2);roxygenize('.', copy.package=FALSE, unlink.target=FALSE)"
rm -f ./postTangleScript.sh
#+end_src

#+results:
: Writing fireSim-package.Rd


* gitignore file (./.gitignore)
:PROPERTIES:
:tangle: ./.gitignore
:comments: no
:no-expand: TRUE
:shebang:
:padline: no
:END: 
#+begin_src gitignore
.#*
#*
,*#
,*~
,*#fireSim.*
fireSim.*
!fireSim.org*
fireSim.org~
,*.o
,*.so
,*.rds                                                                                                                                                                                                                                                                                                                                                                                                     
#+end_src

* Git Revision info
Complete version info
#+begin_src sh :exports results :results output replace 
  echo "Version     : " $MAJORVERSION.$MINORVERSION-$PATCHVERSION
  echo "Commit date : " `git show -s --format="%ci" HEAD`
  echo "git HASH    : " `git rev-parse HEAD`
  echo "git status  : "
  git status
#+end_src

#+RESULTS:
#+begin_example
Version     :  0.0-1
Commit date :  2013-06-27 14:23:54 +0200
git HASH    :  a010ae604586dc03c491c5d05b530fd77a029c28
git status  : 
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   .Rbuildignore
#	modified:   .gitignore
#	modified:   DESCRIPTION
#	modified:   NAMESPACE
#	modified:   R/fireBlockBurn.R
#	modified:   fireSim-package.R
#	modified:   fireSim.org
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	R/seedDisp-package.R
#	README
#	man/
no changes added to commit (use "git add" and/or "git commit -a")
#+end_example



* Rbuildignore file (./.Rbuildignore)
:PROPERTIES:
:tangle: ./.Rbuildignore
:comments: no
:no-expand: TRUE
:shebang:
:padline: no
:END: 
#+begin_src fundamental
.git  
^.*\\.org$
^fireSim.
.gitignore
library
version
postTangleScript.sh
#+end_src



* Package Files
** DESCRIPTION
:PROPERTIES:
:tangle:   ./DESCRIPTION
:padline: no 
:no-expand: TRUE
:comments: no
:END:
#+begin_src fundamental
Package: fireSim
Type: Package
Title: Fire simulations using different routines
Version: MAJORVERSION.MINORVERSION-PATCHVERSION
Date: TODAYSDATE
Author: Rainer M. Krug
Maintainer: Rainer M Krug <Rainer@krugs.de>
Description: Collection of different seed fire routines.
License: GPL-3
LazyLoad: yes
Imports: spgrass6, DBI, RSQLite
LinkingTo: Rcpp  
#+end_src

** NAMESPACE
:PROPERTIES:
:tangle:   ./NAMESPACE
:padline: no 
:no-expand: TRUE
:comments: no
:END:
#+begin_src R
  # useDynLib(fireSim)
  exportPattern("^[[:alpha:]]+")
#+end_src

#+results:

** Package description (./R/package.R)
:PROPERTIES:
:tangle:   ./R/package.R
:eval: nil
:no-expand: TRUE
:comments: no
:END:
#+begin_src R 
##' Simulate fire using different approaches
##'
##' This package is a collection of different fire routines to simulate fire spread
##'
##' 
##' \tabular{ll}{
##' Package: \tab fireSim\cr
##' Type: \tab Package\cr
##' Version: \tab  MAJORVERSION.MINORVERSION.PATCHVERSION\cr
##' Date: \tab TODAYSDATE\cr
##' License: \tab GPL (>= 2)\cr
##' LazyLoad: \tab yes\cr
##' }
##'
##' @name fireSim-package
##' @docType package
##' @author Rainer M Krug \email{Rainer@@krugs.de}
##' @import spgrass6
##' @import RSQLite
##' @import DBI
NULL
#+end_src

* R directory (./R)
** Block fires
*** fireBlockBurn (./R/fireBlockBurnGRASS.R)
:PROPERTIES:
:tangle:   ./R/fireBlockBurnGRASS.R
:no-expand: TRUE
:comments: yes
:END:
Block burn design. Fire breaks limit the fires to the blocks and burning is managed.
#+begin_src R 
##' Fire function for block burning
##'
##' This function simulates block burning, i.e. the burning of whole
##' blocks. The blocks are defined by the polygons in the vector \code{input}
##' layer and this function simly identifies blocks which are burning and
##' adjusts the attributes table of \code{input} (see below for details)
##' accordingly and returns a \code{output} raster layer containing \code{1}
##' for cell burned and \code{NULL} for not burned.
##' 
##' The adjustments of the attributre table of the vector layer \code{input}
##' are as follow:
##' 
##' \enumerate{
##' 
##' \item \bold{\code{burns}}: This \code{logical} column is added if it does
##' not exist yet or owerwritten. It contains \code{logical} values indicating
##' if the corresponding block burns. The values will be overwritten each time
##' the function is called.
##' 
##' \item \bold{\code{burns.YEAR}}: This \code{logical} column will be added
##' if it does not exist or overwritten. YEAR is replaced by the argument
##' \code{year}.  The values are identical to the column \code{burns} but will
##' not be overwritten if the function is called with a different \code{year}
##' argument. Will be overwritten if the function is called with the same
##' \code{year} argument.
##' 
##' \item \bold{\code{countFires}}: This \code{integer} column is added if it
##' does not exist or it will be updated. It contains \code{integer} values
##' indicating the number of times this block has burned. It will be updated
##' each time the function is called.
##' 
##' \item \bold{\code{lastFire}}: This \code{integer} column is added if it
##' does not exist or it will be updated. It contains the \code{year} when the
##' last time the block has burned. If it has not burned yet, the value is
##' \code{NA}. It will be updated each time the function is run.
##' 
##' }
##' 
##' To determine if a block burns, an \R function is passed as the argument
##' \code{doesBlockBurnFunction}. This function has to have the following
##' form:
##'
##' \code{doesBlockBurnFunction <- function(fires)\{...\}}
##'
##' where
##'
##' \code{fires}
##' 
##' is a \code{data.frame} containing the attribute table of the \code{input}
##' layer. This \code{fires} \code{data.frame} has the columns as mentioned
##' above, although they might not contain any values if the function
##' \code{firesBlockBurn} has not been called yet.
##' 
##' The function has to return a \code{logical} vector of the same length as
##' the number of rows in the \code{fires} dataframe.
##'
##' An example would be:
##'
##' \code{doesBlockBurn = function(fires) \{ return(as.logical(rbinom(n=nrow(fires), size=1, 0.5))) \}}
##' 
##' This function \bold{does not} respects MASK in GRASS.
##'  
##' 
##' @usage fireBlockBurnGRASS(input, output, pathToGrassDB, year, doesBlockBurnFunction, overwrite = FALSE)
##' @name fireBlockBurnGRASS
##' @title Block burn
##' 
##' @param input name of the vector layer containing the polygons outlining
##' the blocks
##' @param output name of the output raster layer indicating cells which
##' burned (==1) and which did not burn (==NULL)
##' @param pathToGrassDB path to the \bold{sqlite} grass db containing the
##' attribute table of the layer
##' @param year year of evaluation
##' @param doesBlockBurnFunction \R function determining if a certain block
##' burns, taking the "fires" table in the as input
##'
##' @param overwrite if TRUE, the \code{output} layer will be overwritten if it exists 
##' 
##' @return invisible returns the updated attribute table of \code{input} as
##' \code{data.frame}
##' @author Rainer M Krug <Rainer@@krugs.de>
##'
##' @export
fireBlockBurnGRASS <- function(
    input,
    output,
    pathToGrassDB,
    year,
    doesBlockBurnFunction,
    overwrite = FALSE
    ) {
    if ( length( execGRASS("g.mlist", type="rast", pattern=output, intern=TRUE) ) & !overwrite ) {
        stop(paste("Layer", output, "exists! Please specify 'overwrite=TRUE' or use different output name!"))
    } 
    ## Connect to grass sqlite db
    m <- dbDriver("SQLite")
    con <- dbConnect(m, pathToGrassDB)
    ## load fire_blocks table
    fires <- dbReadTable(con, input)
    ## add column burns if it does not exist
    if (!("burns" %in% names(fires))) {
        fires$burns <- FALSE
    }
    ## add column countFires if it does not exist
    if (!("countFires" %in% names(fires))) {
        fires$countFires <- 0
    }
    ## add column lastFire if it does not exist
    if (!("lastFire" %in% names(fires))) {
        fires$lastFire <- NA
    }
    ## determine which blocks burn
    burn <- doesBlockBurnFunction(fires)
    ## update column burnsThisYear
    fires$burnsThisYear <- burn
    ## add column burns%YEAR
    fires[paste("burns", year, sep=".")] <- burn
    ## increase countFires for these
    fires$countFires <- fires$countFires + as.integer(burn)
     ## update lastFire to this year
    fires$lastFire[burn] <- as.integer(year)
    ## write table back
    dbWriteTable(con, "fire_blocks", fires, overwrite=TRUE)
    ## close connection
    dbDisconnect(con)
    ## create fireLayerName(year) fire raster layer
    execGRASS(
        "v.to.rast",
        input = input,
        output = output,
        use = "attr",
        attrcolumn = "burnsThisYear",
        flags = c("overwrite")
        )
    ## set "no fire in cell" to null()
    execGRASS(
        "r.mapcalc",
        expression = paste(
            output, 
            " = ",
            "if(", output, ", 1, null())"
            ),
        flags = "overwrite"
        )
    invisible(fires)
}
#+end_src


* src directory (./src)

* TODO Tests
* TODO Vignette
* TODO Examples
* package management                                               :noexport:
** build package
#+begin_src sh :results output
R CMD bUild ./
#+End_src


** check package
#+begin_src sh :results output 
  R CMD check fireSim_0.0-1.tar.gz
#+end_src


** INSTALL package
#+begin_src sh :results output :var rckopts="--library=./Rlib"
  R CMD INSTALL $rckopts pkg
#+end_src

** load library
#+begin_src R :session :results output :var libname=(file-name-directory buffer-file-name)
## customize the next line as needed: 
.libPaths(new = file.path(getwd(),"Rlib") )
require( basename(libname), character.only=TRUE)
#+end_src

** grep require( 

- if you keep all your source code in this =.org= document, then you do not
  need to do this - instead just type =C-s require(=
- list package dependencies that might need to be dealt with

#+begin_src sh :results output
grep 'require(' R/*
#+end_src

#+RESULTS:


* Package structure and src languages                              :noexport:

- The top level directory may contain these files (and others):

| filename    | filetype      |
|-------------+---------------|
| INDEX       | text          |
| NAMESPACE   | R-like script |
| configure   | Bourne shell  |
| cleanup     | Bourne shell  |
| LICENSE     | text          |
| LICENCE     | text          |
| COPYING     | text          |
| NEWS        | text          |
| DESCRIPTION | [[http://www.debian.org/doc/debian-policy/ch-controlfields.html][DCF]]           |
|-------------+---------------|


 
   and subdirectories
| direname | types of files                                   |
|----------+--------------------------------------------------|
| R        | R                                                |
| data     | various                                          |
| demo     | R                                                |
| exec     | various                                          |
| inst     | various                                          |
| man      | Rd                                               |
| po       | poEdit                                           |
| src      | .c, .cc or .cpp, .f, .f90, .f95, .m, .mm, .M, .h |
| tests    | R, Rout                                          |
|----------+--------------------------------------------------|
|          |                                                  |
   
 [[info:emacs#Specifying%20File%20Variables][info:emacs#Specifying File Variables]]
